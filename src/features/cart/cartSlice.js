import { createAsyncThunk, createSlice } from "@reduxjs/toolkit";
import { fetchItems, addItem, deleteItem, updateItem } from "./cartAPI";

const initialState = {
	items: [],
	status: "idle",
};

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(addAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
export const fetchAsync = createAsyncThunk("cart/fetchItems", async () => {
	const response = await fetchItems();
	return response.data;
});

export const addAsync = createAsyncThunk("cart/addItem", async (item) => {
	const { id, title, brand, thumbnail, price } = item;
	const response = await addItem({
		id,
		title,
		brand,
		thumbnail,
		price,
		quantity: 1,
	});
	return response.data;
});

export const deleteAsync = createAsyncThunk("cart/deleteItem", async (id) => {
	const response = await deleteItem(id);
	return response.data;
});
export const updateAsync = createAsyncThunk(
	"cart/updateItem",
	async ({ id, change }) => {
		const response = await updateItem(id, change);
		return response.data;
	}
);

export const itemSlice = createSlice({
	name: "items",
	initialState,
	// The `reducers` field lets us define reducers and generate associated actions
	reducers: {},
	// The `extraReducers` field lets the slice handle actions defined elsewhere,
	// including actions generated by createAsyncThunk or in other slices.
	extraReducers: (builder) => {
		builder
			// this also contains the action ans the
			.addCase(fetchAsync.pending, (state) => {
				state.status = "loading";
			})
			.addCase(fetchAsync.fulfilled, (state, action) => {
				state.status = "idle";
				state.items = action.payload;
			})
			.addCase(addAsync.fulfilled, (state, action) => {
				state.status = "idle";
				state.items.push(action.payload);
			})
			.addCase(deleteAsync.fulfilled, (state, action) => {
				state.status = "idle";
				// state.items.filter((item) => item.id !== action.payload);
				const index = state.items.findIndex(
					(item) => item.id === action.payload
				);
				state.items.splice(index, 1);
			})
			.addCase(updateAsync.fulfilled, (state, action) => {
				state.status = "idle";
				// state.items.filter((item) => item.id !== action.payload);
				const index = state.items.findIndex(
					(item) => item.id === action.payload.id
				);
				state.items.splice(index, 1, action.payload);
			});
	},
});

// export const { } = itemSlice.actions;

export default itemSlice.reducer;
