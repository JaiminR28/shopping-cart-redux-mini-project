import { createAsyncThunk, createSlice } from "@reduxjs/toolkit";
import { fetchProducts } from "./productAPI";

const initialState = {
	products: [],
	status: "idle",
};

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(fetchAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
export const fetchAsync = createAsyncThunk(
	"products/fetchProduct",
	async () => {
		const response = await fetchProducts();
		// The value we return becomes the `fulfilled` action payload
		return response.data;
	}
);

export const productSlice = createSlice({
	name: "products",
	initialState,
	// The `reducers` field lets us define reducers and generate associated actions
	reducers: {},
	// The `extraReducers` field lets the slice handle actions defined elsewhere,
	// including actions generated by createAsyncThunk or in other slices.
	extraReducers: (builder) => {
		builder
			// this also contains the action ans the
			.addCase(fetchAsync.pending, (state) => {
				state.status = "loading";
			})
			.addCase(fetchAsync.fulfilled, (state, action) => {
				state.status = "idle";
				state.products = action.payload;
			});
	},
});

// export const { } = productSlice.actions;

export default productSlice.reducer;
